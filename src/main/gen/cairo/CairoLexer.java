// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CairoLexer.flex

package cairo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.text.CharArrayUtil;
import com.intellij.psi.TokenType;
import cairo.psi.CairoTokens;


class CairoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int FN_DECL_START = 6;
  public static final int FN_DECL_PARA = 8;
  public static final int FN_RETURN_DECL_TYPE = 10;
  public static final int LET_START = 12;
  public static final int LET_SINGLE_IDENTIFY = 14;
  public static final int CONST_START = 16;
  public static final int CONST_SINGLE_IDENTIFY = 18;
  public static final int HASH_START = 20;
  public static final int GENERIC_PARAM_STATE = 22;
  public static final int NESTED_GENERIC_PARAM_STATE = 24;
  public static final int STATE_STRUCT_FIELD = 26;
  public static final int STRUCT_DECL_START = 28;
  public static final int STATE_STRUCT_FIELD_TYPE = 30;
  public static final int IMPL_DECL = 32;
  public static final int ITEM_TYPE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\32\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\4\45"+
    "\1\46\1\45\16\47\1\50\5\47\1\51\1\52\1\53"+
    "\1\54\1\55\1\43\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\47\1\64\1\65\1\47\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\47\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\47\1\104\1\105\1\106"+
    "\1\107\6\0\1\3\u01a2\0\2\3\326\0\u0100\110";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\20\30\1\34\1\35"+
    "\1\36\1\37\3\40\1\41\1\42\1\43\1\44\1\43"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\3\54"+
    "\1\55\1\56\1\57\1\43\4\60\1\61\1\62\2\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\43\1\101\1\102"+
    "\1\103\1\104\2\105\1\106\1\43\1\107\1\110\1\111"+
    "\1\112\1\43\1\113\1\114\1\43\1\115\3\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\43\1\125\1\126"+
    "\1\127\1\43\1\130\1\131\3\132\1\133\1\134\1\0"+
    "\1\135\1\0\1\136\3\0\1\137\1\140\1\141\1\142"+
    "\3\0\2\21\2\0\1\143\1\0\1\144\1\145\1\146"+
    "\1\147\2\0\1\150\1\151\7\30\1\152\1\30\1\153"+
    "\1\30\1\154\6\30\1\155\2\30\1\156\1\0\11\30"+
    "\1\157\1\160\1\0\2\54\1\0\3\60\1\63\1\0"+
    "\1\105\2\0\1\161\1\162\2\116\1\0\1\163\1\0"+
    "\1\132\1\164\3\0\1\165\3\0\1\166\1\167\1\0"+
    "\1\142\1\170\1\142\1\171\1\21\1\171\1\0\1\21"+
    "\1\172\3\0\1\21\1\173\1\174\1\175\1\176\1\177"+
    "\7\30\1\200\1\30\1\201\3\30\1\202\1\30\1\203"+
    "\3\30\1\204\1\205\11\30\1\206\2\30\1\207\1\210"+
    "\1\211\1\60\1\212\1\213\1\105\1\214\1\215\1\0"+
    "\1\162\1\216\1\162\1\116\1\217\1\220\1\132\6\0"+
    "\1\221\3\222\1\172\1\173\1\174\4\30\1\223\1\224"+
    "\2\30\1\225\1\226\2\30\1\227\1\30\1\230\1\231"+
    "\1\232\1\30\1\233\4\30\1\234\1\235\3\30\1\60"+
    "\1\236\1\237\3\240\1\116\1\132\5\0\1\172\3\0"+
    "\1\173\3\0\1\174\1\241\1\242\1\30\1\243\1\30"+
    "\1\244\1\30\1\245\4\30\1\246\1\247\1\30\1\250"+
    "\1\251\1\60\1\252\1\132\2\0\1\30\1\253\2\30"+
    "\1\254\1\255\1\256\1\257\1\60\1\132\2\30\1\260"+
    "\2\261\1\262\4\30\1\263";

  private static int [] zzUnpackAction() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0447\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0447"+
    "\0\u0447\0\u0447\0\u0646\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0447\0\u0845"+
    "\0\u088e\0\u08d7\0\u0447\0\u0920\0\u0447\0\u0447\0\u0447\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u0df9\0\u0e42\0\u0e8b\0\u0447\0\u0ed4"+
    "\0\u0447\0\u0f1d\0\u0f66\0\u0447\0\u0447\0\u0faf\0\u0447\0\u0ff8"+
    "\0\u0447\0\u0447\0\u1041\0\u108a\0\u10d3\0\u111c\0\u0447\0\u0447"+
    "\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u0447\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u0447\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u0447"+
    "\0\u0447\0\u0447\0\u151a\0\u1563\0\u0447\0\u0447\0\u15ac\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u0447"+
    "\0\u0447\0\u1719\0\u1762\0\u17ab\0\u0447\0\u0447\0\u17f4\0\u0447"+
    "\0\u183d\0\u1886\0\u18cf\0\u1918\0\u0447\0\u1961\0\u0447\0\u19aa"+
    "\0\u19f3\0\u1a3c\0\u0447\0\u0447\0\u0447\0\u1a85\0\u0447\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u0447\0\u0447\0\u05b4\0\u0447\0\u1bf2"+
    "\0\u0447\0\u1c3b\0\u1c84\0\u1ccd\0\u0447\0\u1d16\0\u1d5f\0\u1da8"+
    "\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u0447"+
    "\0\u1ff0\0\u0447\0\u0447\0\u0447\0\u0447\0\u2039\0\u2082\0\u0447"+
    "\0\u0920\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281"+
    "\0\u0920\0\u22ca\0\u0920\0\u2313\0\u0920\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u24c9\0\u0920\0\u2512\0\u255b\0\u0447\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u0447\0\u0447\0\u287e\0\u28c7\0\u2910\0\u1165\0\u2959"+
    "\0\u29a2\0\u29eb\0\u2a34\0\u15ac\0\u2a7d\0\u16d0\0\u2ac6\0\u2b0f"+
    "\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u0447\0\u1ace\0\u2c7c\0\u1b17"+
    "\0\u2cc5\0\u2d0e\0\u2d57\0\u0447\0\u2da0\0\u2de9\0\u2e32\0\u0447"+
    "\0\u0447\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u0447\0\u2f9f\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u0447\0\u319e"+
    "\0\u31e7\0\u0447\0\u0447\0\u0447\0\u3230\0\u3279\0\u32c2\0\u330b"+
    "\0\u3354\0\u339d\0\u33e6\0\u0920\0\u342f\0\u0920\0\u3478\0\u34c1"+
    "\0\u350a\0\u0920\0\u3553\0\u0920\0\u359c\0\u35e5\0\u362e\0\u3677"+
    "\0\u0920\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876"+
    "\0\u38bf\0\u3908\0\u0920\0\u3951\0\u399a\0\u1041\0\u1041\0\u11ae"+
    "\0\u39e3\0\u11ae\0\u131b\0\u3a2c\0\u0447\0\u0447\0\u3a75\0\u3abe"+
    "\0\u3b07\0\u3b50\0\u3b99\0\u183d\0\u0447\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u0447\0\u0447\0\u2f0d\0\u3de1"+
    "\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u0920"+
    "\0\u0920\0\u4029\0\u4072\0\u0920\0\u0920\0\u40bb\0\u4104\0\u0920"+
    "\0\u414d\0\u0920\0\u0920\0\u0447\0\u4196\0\u0920\0\u41df\0\u4228"+
    "\0\u4271\0\u42ba\0\u0920\0\u0920\0\u4303\0\u434c\0\u4395\0\u43de"+
    "\0\u15f5\0\u0447\0\u0447\0\u3b07\0\u4427\0\u4470\0\u44b9\0\u4502"+
    "\0\u454b\0\u4594\0\u45dd\0\u4626\0\u0447\0\u466f\0\u46b8\0\u4701"+
    "\0\u0447\0\u474a\0\u4793\0\u47dc\0\u0447\0\u0920\0\u0920\0\u4825"+
    "\0\u0920\0\u486e\0\u0920\0\u48b7\0\u0920\0\u4900\0\u4949\0\u4992"+
    "\0\u49db\0\u0920\0\u0920\0\u4a24\0\u0920\0\u0920\0\u4a6d\0\u183d"+
    "\0\u4ab6\0\u4aff\0\u4b48\0\u4b91\0\u0920\0\u4bda\0\u4c23\0\u0920"+
    "\0\u0920\0\u0920\0\u0920\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47\0\u0920"+
    "\0\u11ae\0\u1b17\0\u0920\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u2082";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\2\24\1\0\2\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\10\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\23\1\53\4\54\1\55\1\23\1\56"+
    "\1\57\1\54\1\60\1\61\1\62\1\54\1\63\1\64"+
    "\1\54\1\65\1\54\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\54\1\77\2\54\1\100"+
    "\1\101\1\102\1\103\1\0\17\104\1\105\4\104\1\106"+
    "\64\104\7\107\1\110\101\107\1\111\2\112\1\0\2\112"+
    "\6\111\1\113\1\114\22\111\1\115\4\111\4\116\4\111"+
    "\27\116\1\117\3\111\1\0\1\111\2\120\1\0\2\120"+
    "\6\111\1\113\1\111\1\121\17\111\1\122\6\111\4\123"+
    "\4\111\13\123\1\124\3\123\1\125\7\123\4\111\1\0"+
    "\1\111\2\126\1\0\2\126\6\111\1\113\1\127\1\130"+
    "\25\111\1\131\4\132\4\111\13\132\1\133\1\134\2\132"+
    "\1\135\7\132\1\136\3\111\1\0\1\111\2\137\1\0"+
    "\2\137\6\111\1\113\30\111\4\140\4\111\13\140\1\141"+
    "\13\140\4\111\1\0\1\111\2\142\1\0\2\142\6\111"+
    "\1\113\21\111\1\143\51\111\1\0\1\111\2\144\1\0"+
    "\2\144\6\111\1\113\30\111\4\145\4\111\27\145\4\111"+
    "\1\0\1\111\2\146\1\0\2\146\6\111\1\113\21\111"+
    "\1\143\51\111\1\0\1\111\2\147\1\0\2\147\6\111"+
    "\1\113\1\150\1\151\2\111\1\152\23\111\4\153\2\111"+
    "\1\56\1\111\27\153\4\111\1\0\1\111\2\154\1\0"+
    "\2\154\6\111\1\113\1\155\1\156\1\111\1\157\1\160"+
    "\1\157\13\111\1\161\1\111\1\162\1\111\1\163\1\111"+
    "\1\157\4\164\4\111\10\164\1\165\16\164\4\111\1\0"+
    "\1\111\2\166\1\0\2\166\6\111\1\113\3\111\1\167"+
    "\1\170\1\167\15\111\1\162\1\111\1\171\1\111\1\167"+
    "\4\172\4\111\27\172\4\111\1\0\1\111\2\173\1\0"+
    "\2\173\6\111\1\174\1\175\1\176\5\111\1\177\11\111"+
    "\1\200\6\111\4\201\4\111\3\201\1\202\12\201\1\203"+
    "\10\201\2\111\1\117\1\111\1\0\1\111\2\204\1\0"+
    "\2\204\6\111\1\113\23\111\1\205\4\111\4\206\4\111"+
    "\27\206\1\207\3\111\112\0\1\111\2\210\1\0\2\210"+
    "\6\111\1\113\67\111\1\117\3\111\1\0\1\111\2\211"+
    "\1\0\2\211\6\111\1\212\1\213\1\214\2\111\1\215"+
    "\14\111\1\216\1\111\1\217\3\111\1\220\4\221\4\111"+
    "\14\221\1\222\1\223\11\221\1\224\3\111\2\0\2\24"+
    "\1\0\2\24\144\0\1\225\47\0\7\226\1\227\42\226"+
    "\1\230\36\226\51\0\1\231\37\0\5\232\7\233\1\0"+
    "\35\233\1\234\35\233\1\232\42\0\1\235\71\0\1\236"+
    "\104\0\1\237\4\0\1\240\107\0\1\241\1\0\11\45"+
    "\10\0\1\242\6\0\1\45\1\0\1\243\2\0\1\242"+
    "\1\244\1\0\1\245\4\0\1\246\4\0\1\245\2\0"+
    "\1\247\31\0\1\241\1\0\11\45\10\0\1\242\6\0"+
    "\1\45\4\0\1\242\1\244\1\0\1\245\11\0\1\245"+
    "\47\0\1\250\112\0\1\251\1\252\110\0\1\253\1\254"+
    "\107\0\1\255\1\256\54\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\27\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\20\54\1\261"+
    "\6\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\17\54\1\262\7\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\15\54\1\263"+
    "\1\54\1\264\7\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\12\54\1\265\1\54\1\266"+
    "\10\54\1\267\1\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\1\54\1\270\12\54\1\271"+
    "\1\272\11\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\6\54\1\273\4\54\1\274\1\275"+
    "\12\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\5\54\1\276\7\54\1\277\11\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\1\54\1\300\13\54\1\301\4\54\1\302\4\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\15\54\1\303\11\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\6\54\1\304\20\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\17\54\1\305\2\54\1\306\4\54\13\0\1\257\1\307"+
    "\1\310\4\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\5\54\1\311\21\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\5\54\1\312\13\54\1\313"+
    "\1\314\4\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\17\54\1\315\6\54\1\316\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\14\54\1\317\3\54\1\320\6\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\7\54\1\321"+
    "\17\54\5\0\17\104\1\0\4\104\1\0\64\104\24\0"+
    "\1\322\103\0\1\323\101\0\1\110\101\0\2\112\1\0"+
    "\2\112\105\0\1\324\133\0\11\116\7\0\4\116\4\0"+
    "\27\116\6\0\2\120\1\0\2\120\130\0\11\123\7\0"+
    "\4\123\4\0\27\123\32\0\11\123\7\0\4\123\4\0"+
    "\22\123\1\325\4\123\32\0\11\123\7\0\4\123\4\0"+
    "\5\123\1\326\21\123\6\0\2\126\1\0\2\126\147\0"+
    "\1\327\4\132\4\0\27\132\32\0\11\132\7\0\4\132"+
    "\4\0\27\132\32\0\11\132\7\0\4\132\4\0\22\132"+
    "\1\330\4\132\32\0\11\132\7\0\4\132\4\0\15\132"+
    "\1\331\11\132\32\0\11\132\7\0\4\132\4\0\5\132"+
    "\1\332\21\132\6\0\2\137\1\0\2\137\130\0\11\140"+
    "\7\0\4\140\4\0\27\140\32\0\11\140\7\0\4\140"+
    "\4\0\22\140\1\333\4\140\6\0\2\142\1\0\2\142"+
    "\104\0\2\144\1\0\2\144\130\0\11\145\7\0\4\145"+
    "\4\0\27\145\6\0\2\146\1\0\2\146\104\0\2\147"+
    "\1\0\2\147\130\0\11\153\7\0\4\153\4\0\27\153"+
    "\6\0\2\154\1\0\2\154\147\0\1\334\4\164\4\0"+
    "\27\164\32\0\11\164\7\0\4\164\4\0\27\164\32\0"+
    "\11\164\7\0\4\164\4\0\13\164\1\335\13\164\6\0"+
    "\2\166\1\0\2\166\147\0\1\336\4\172\4\0\27\172"+
    "\32\0\11\172\7\0\4\172\4\0\27\172\6\0\2\173"+
    "\1\0\2\173\105\0\1\337\125\0\1\340\4\0\1\341"+
    "\111\0\11\201\7\0\4\201\4\0\27\201\32\0\11\201"+
    "\7\0\4\201\4\0\17\201\1\342\7\201\32\0\11\201"+
    "\7\0\4\201\4\0\22\201\1\343\4\201\6\0\2\204"+
    "\1\0\2\204\130\0\11\206\7\0\4\206\4\0\27\206"+
    "\6\0\2\210\1\0\2\210\104\0\2\211\1\0\2\211"+
    "\105\0\1\344\144\0\1\345\116\0\1\346\4\221\4\0"+
    "\27\221\32\0\11\221\7\0\4\221\4\0\27\221\32\0"+
    "\11\221\7\0\4\221\4\0\15\221\1\347\11\221\32\0"+
    "\11\221\7\0\4\221\4\0\6\221\1\350\20\221\7\0"+
    "\1\226\1\0\1\226\2\0\1\226\4\0\1\226\10\0"+
    "\1\226\22\0\1\351\1\0\1\226\16\0\1\226\2\0"+
    "\1\226\1\0\1\226\1\352\2\0\1\353\6\0\5\233"+
    "\7\0\1\354\73\0\1\233\14\0\1\354\76\0\1\233"+
    "\1\0\1\233\7\0\1\233\10\0\1\233\22\0\1\355"+
    "\1\0\1\233\16\0\1\233\2\0\1\233\1\0\1\233"+
    "\1\356\2\0\1\357\31\0\1\360\73\0\1\361\10\0"+
    "\1\362\71\0\2\363\1\0\1\363\1\0\1\363\1\364"+
    "\15\363\1\365\64\363\23\366\1\0\1\366\11\367\17\366"+
    "\1\370\4\366\1\0\26\366\20\0\1\371\1\0\1\371"+
    "\2\0\11\372\17\0\1\372\60\0\2\373\26\0\1\373"+
    "\63\0\1\374\2\0\1\375\103\0\1\376\1\0\1\374"+
    "\2\0\1\375\1\377\101\0\7\u0100\21\0\1\u0100\60\0"+
    "\11\u0101\7\0\2\u0101\6\0\7\u0101\66\0\1\u0102\110\0"+
    "\1\u0103\64\0\1\u0104\101\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\5\54\1\u0105\21\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\14\54\1\u0106\12\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\1\54\1\u0107\25\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\20\54\1\u0108\6\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\22\54\1\u0109\4\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\21\54\1\u010a\5\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\12\54\1\u010b\14\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\17\54\1\u010c\7\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\16\54\1\u010d\10\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\21\54\1\u010e\5\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\15\54\1\u010f\11\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\3\54\1\u0110\15\54\1\u0111\5\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\4\54\1\u0112"+
    "\16\54\1\u0113\3\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\21\54\1\u0114\5\54\13\0"+
    "\1\257\6\0\1\260\7\0\11\54\7\0\4\54\4\0"+
    "\16\54\1\u0115\10\54\13\0\1\257\6\0\1\260\7\0"+
    "\11\54\7\0\4\54\4\0\10\54\1\u0116\4\54\1\u0117"+
    "\11\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\2\54\1\u0118\24\54\14\0\1\307\1\310"+
    "\106\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\6\54\1\u0119\12\54\1\u011a\5\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\12\54"+
    "\1\u011b\14\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\1\54\1\u011c\15\54\1\u011d\7\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\16\54\1\u011e\10\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\1\54\1\u011f\20\54"+
    "\1\u0120\4\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\16\54\1\u0121\10\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\20\54"+
    "\1\u0122\6\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\5\54\1\u0123\21\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\5\54"+
    "\1\u0124\2\54\1\u0125\16\54\21\0\1\117\121\0\11\123"+
    "\7\0\4\123\4\0\21\123\1\u0126\5\123\32\0\11\123"+
    "\7\0\4\123\4\0\6\123\1\u0127\20\123\32\0\11\132"+
    "\7\0\4\132\4\0\21\132\1\u0128\5\132\32\0\11\132"+
    "\7\0\4\132\4\0\16\132\1\u0129\10\132\32\0\11\132"+
    "\7\0\4\132\4\0\6\132\1\u012a\20\132\32\0\11\140"+
    "\7\0\4\140\4\0\21\140\1\u012b\5\140\32\0\11\164"+
    "\7\0\4\164\4\0\16\164\1\u012c\10\164\21\0\1\u012d"+
    "\102\0\1\u012e\10\0\1\u012f\71\0\2\u0130\1\0\1\u0130"+
    "\1\0\1\u0130\1\u0131\15\u0130\1\u0132\64\u0130\25\0\11\201"+
    "\7\0\4\201\4\0\1\201\1\u0133\25\201\32\0\11\201"+
    "\7\0\4\201\4\0\2\201\1\u0134\24\201\21\0\1\u0135"+
    "\121\0\11\221\7\0\4\221\4\0\16\221\1\u0136\10\221"+
    "\32\0\11\u0137\7\0\2\u0137\7\0\6\u0137\52\0\11\u0138"+
    "\7\0\2\u0138\7\0\6\u0138\52\0\11\u0139\7\0\2\u0139"+
    "\7\0\6\u0139\52\0\11\u013a\7\0\2\u013a\7\0\6\u013a"+
    "\52\0\11\u013b\7\0\2\u013b\7\0\6\u013b\52\0\11\u013c"+
    "\7\0\2\u013c\7\0\6\u013c\25\0\17\361\1\0\4\361"+
    "\1\u013d\64\361\2\363\1\0\1\363\1\0\104\363\2\364"+
    "\1\0\1\364\1\0\106\364\1\u013e\1\u013f\1\u0140\17\364"+
    "\1\363\64\364\25\0\11\367\10\0\1\242\6\0\1\367"+
    "\4\0\1\242\1\244\52\0\11\372\17\0\1\372\60\0"+
    "\11\372\17\0\1\372\5\0\1\244\52\0\2\373\26\0"+
    "\1\373\7\0\1\u0141\11\0\1\u0141\40\0\1\377\112\0"+
    "\1\377\112\0\1\377\102\0\7\u0100\21\0\1\u0100\7\0"+
    "\1\u0142\11\0\1\u0142\36\0\11\u0101\7\0\2\u0101\6\0"+
    "\7\u0101\1\0\1\u0143\11\0\1\u0143\17\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\1\54\1\u0144"+
    "\25\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\20\54\1\u0145\1\u0146\5\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\21\54"+
    "\1\u0147\5\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\5\54\1\u0148\21\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\13\54"+
    "\1\u0149\13\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\5\54\1\u014a\21\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\20\54"+
    "\1\u014b\6\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\12\54\1\u014c\14\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\16\54"+
    "\1\u014d\10\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\17\54\1\u014e\7\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\3\54"+
    "\1\u014f\23\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\5\54\1\u0150\21\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\1\54"+
    "\1\u0151\25\54\13\0\1\257\6\0\1\260\7\0\11\54"+
    "\7\0\4\54\4\0\23\54\1\u0152\3\54\13\0\1\257"+
    "\6\0\1\260\7\0\11\54\7\0\4\54\4\0\3\54"+
    "\1\u0153\23\54\13\0\1\257\6\0\1\u0154\7\0\11\54"+
    "\7\0\4\54\4\0\27\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\22\54\1\u0155\4\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\6\54\1\u0156\20\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\21\54\1\u0157\5\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\22\54\1\u0158\4\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\5\54\1\u0159\21\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\10\54\1\u015a\16\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\5\54\1\u015b\21\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\5\54\1\u015c\21\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\1\54\1\u015d\25\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\17\54\1\u015e\7\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\12\54\1\u015f\14\54"+
    "\32\0\11\132\7\0\4\132\4\0\1\132\1\u0160\25\132"+
    "\32\0\11\164\7\0\4\164\4\0\12\164\1\u0161\14\164"+
    "\5\0\17\u012e\1\0\4\u012e\1\u0162\64\u012e\2\u0130\1\0"+
    "\1\u0130\1\0\104\u0130\2\u0131\1\0\1\u0131\1\0\106\u0131"+
    "\1\u0163\1\u0164\1\u0165\17\u0131\1\u0130\64\u0131\25\0\11\201"+
    "\7\0\4\201\4\0\21\201\1\u0166\5\201\32\0\11\221"+
    "\7\0\4\221\4\0\1\221\1\u0167\25\221\32\0\11\u0168"+
    "\7\0\2\u0168\7\0\6\u0168\52\0\11\353\7\0\2\353"+
    "\7\0\6\353\52\0\11\226\7\0\2\226\7\0\6\226"+
    "\52\0\11\u0169\7\0\2\u0169\7\0\6\u0169\52\0\11\357"+
    "\7\0\2\357\7\0\6\357\52\0\11\233\7\0\2\233"+
    "\7\0\6\233\27\0\1\u013e\134\0\1\u016a\1\0\1\u016b"+
    "\2\0\1\u016c\1\u016d\102\0\1\u016e\1\0\1\u016f\2\0"+
    "\1\u0170\1\u0171\102\0\1\u0172\1\0\1\u0173\2\0\1\u0174"+
    "\1\u0175\62\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\11\54\1\u0176\15\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\21\54\1\u0177"+
    "\5\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\10\54\1\u0178\16\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\5\54\1\u0179"+
    "\21\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\17\54\1\u017a\7\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\5\54\1\u017b"+
    "\21\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\15\54\1\u017c\11\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\7\54\1\u017d"+
    "\17\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\14\54\1\u017e\12\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\17\54\1\u017f"+
    "\7\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\10\54\1\u0180\16\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\3\54\1\u0181"+
    "\23\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\17\54\1\u0182\7\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\21\54\1\u0183"+
    "\5\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\6\54\1\u0184\20\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\5\54\1\u0185"+
    "\21\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\5\54\1\u0186\21\54\32\0\11\132\7\0"+
    "\4\132\4\0\14\132\1\u0187\12\132\7\0\1\u0163\133\0"+
    "\11\201\7\0\4\201\4\0\5\201\1\u0188\21\201\32\0"+
    "\11\221\7\0\4\221\4\0\14\221\1\u0189\12\221\32\0"+
    "\11\u018a\7\0\2\u018a\7\0\6\u018a\52\0\11\u018b\7\0"+
    "\2\u018b\7\0\6\u018b\60\0\1\u016d\104\0\1\u016d\112\0"+
    "\1\u016d\112\0\1\u0171\104\0\1\u0171\112\0\1\u0171\112\0"+
    "\1\u0175\104\0\1\u0175\112\0\1\u0175\65\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\14\54\1\u018c"+
    "\12\54\13\0\1\257\6\0\1\260\7\0\11\54\7\0"+
    "\4\54\4\0\14\54\1\u018d\12\54\13\0\1\257\6\0"+
    "\1\260\7\0\11\54\7\0\4\54\4\0\1\u018e\26\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\10\54\1\u018f\16\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\14\54\1\u0190\12\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\3\54\1\u0191\23\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\21\54\1\u0192\5\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\5\54\1\u0193\21\54\32\0\11\132\7\0\4\132"+
    "\4\0\10\132\1\u0194\16\132\32\0\11\221\7\0\4\221"+
    "\4\0\10\221\1\u0195\16\221\32\0\11\352\7\0\2\352"+
    "\7\0\6\352\52\0\11\356\7\0\2\356\7\0\6\356"+
    "\33\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\22\54\1\u0196\4\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\17\54\1\u0197\7\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\3\54\1\u0198\23\54\32\0\11\132\7\0\4\132"+
    "\4\0\3\132\1\u0199\23\132\32\0\11\221\7\0\4\221"+
    "\4\0\3\221\1\u019a\23\221\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\5\54\1\u019b\21\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\22\54\1\u019c\4\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\12\54\1\u019d\14\54"+
    "\13\0\1\257\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\5\54\1\u019e\21\54\13\0\1\257\6\0\1\260"+
    "\7\0\11\54\7\0\4\54\4\0\20\54\1\u019f\6\54"+
    "\13\0\1\u01a0\6\0\1\260\7\0\11\54\7\0\4\54"+
    "\4\0\27\54\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20148];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\10\2\0\1\11\4\1\3\11\1\1\5\11"+
    "\6\1\1\11\3\1\1\11\1\1\3\11\20\1\4\11"+
    "\3\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\2\11\4\1\2\11\5\1\1\11\4\1\1\11"+
    "\4\1\3\11\2\1\2\11\1\1\4\11\4\1\2\11"+
    "\3\1\2\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\3\1\3\11\1\1\1\11\4\1\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\3\1\3\0\2\1\2\0"+
    "\1\11\1\0\4\11\2\0\1\11\26\1\1\11\1\0"+
    "\11\1\2\11\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\2\0\4\1\1\0\1\11\1\0\2\1\3\0\1\11"+
    "\3\0\2\11\1\0\3\1\1\11\2\1\1\0\2\1"+
    "\3\0\1\11\2\1\3\11\50\1\2\11\1\0\5\1"+
    "\1\11\1\1\6\0\2\11\25\1\1\11\15\1\2\11"+
    "\4\1\5\0\1\11\3\0\1\11\3\0\1\11\24\1"+
    "\2\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    public enum CallGenericType {
            FN_DECL, STRUCT_DECL, IMPL_DECL, RETURN_TYPE, FN_PARA_TYPE, ITEM_TYPE
    }
    public enum CallItemType {
                FN_PARA, FN_RETURN, STRUCT_FIELD, IMPL_FIRST
    }
    public enum CallCommentType {
                LET, STRUCT_FIELD
    }
	private int start_comment;
	private int start_raw_string;
	private int raw_string_hashes;
	private int comment_depth, item_type_parenthesis_depth = 0;
    private int generic_para_depth = 0;
    private CallGenericType call_generic_type;
    private CallItemType call_item_type;
    private CallCommentType call_comment_type;
	private boolean doc_comment;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CairoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              yybegin(YYINITIAL); zzStartRead = start_comment; return CairoTokens.BLOCK_COMMENT;
            }  // fall though
            case 417: break;
            case IN_RAW_STRING: {
              yybegin(YYINITIAL); zzStartRead = start_raw_string; return CairoTokens.RAW_STRING_LIT;
            }  // fall though
            case 418: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 180: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 181: break;
          case 3:
            { yybegin(YYINITIAL); return CairoTokens.NOT;
            }
          // fall through
          case 182: break;
          case 4:
            { yybegin(YYINITIAL); return CairoTokens.HASH;
            }
          // fall through
          case 183: break;
          case 5:
            { yybegin(YYINITIAL); return CairoTokens.DOLLAR;
            }
          // fall through
          case 184: break;
          case 6:
            { yybegin(YYINITIAL); return CairoTokens.REMAINDER;
            }
          // fall through
          case 185: break;
          case 7:
            { yybegin(YYINITIAL); return CairoTokens.BITWISE_AND;
            }
          // fall through
          case 186: break;
          case 8:
            { yybegin(YYINITIAL); return CairoTokens.SINGLE_QUOTE;
            }
          // fall through
          case 187: break;
          case 9:
            { yybegin(YYINITIAL); return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 188: break;
          case 10:
            { yybegin(YYINITIAL); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 189: break;
          case 11:
            { yybegin(YYINITIAL); return CairoTokens.MULTIPLY;
            }
          // fall through
          case 190: break;
          case 12:
            { yybegin(YYINITIAL); return CairoTokens.PLUS;
            }
          // fall through
          case 191: break;
          case 13:
            { yybegin(YYINITIAL); return CairoTokens.COMMA;
            }
          // fall through
          case 192: break;
          case 14:
            { yybegin(YYINITIAL); return CairoTokens.MINUS;
            }
          // fall through
          case 193: break;
          case 15:
            { yybegin(YYINITIAL); return CairoTokens.DOT;
            }
          // fall through
          case 194: break;
          case 16:
            { yybegin(YYINITIAL); return CairoTokens.DIVIDE;
            }
          // fall through
          case 195: break;
          case 17:
            { yybegin(YYINITIAL); return CairoTokens.DEC_LIT;
            }
          // fall through
          case 196: break;
          case 18:
            { yybegin(YYINITIAL); return CairoTokens.COLON;
            }
          // fall through
          case 197: break;
          case 19:
            { yybegin(YYINITIAL); return CairoTokens.SEMICOLON;
            }
          // fall through
          case 198: break;
          case 20:
            { yybegin(YYINITIAL); return CairoTokens.LESS_THAN;
            }
          // fall through
          case 199: break;
          case 21:
            { yybegin(YYINITIAL); return CairoTokens.ASSIGN;
            }
          // fall through
          case 200: break;
          case 22:
            { yybegin(YYINITIAL); return CairoTokens.GREATER_THAN;
            }
          // fall through
          case 201: break;
          case 23:
            { yybegin(YYINITIAL); return CairoTokens.AT;
            }
          // fall through
          case 202: break;
          case 24:
            { yybegin(YYINITIAL); return CairoTokens.IDENTIFIER;
            }
          // fall through
          case 203: break;
          case 25:
            { yybegin(YYINITIAL); return CairoTokens.OPEN_SQUARE_BRACKET;
            }
          // fall through
          case 204: break;
          case 26:
            { yybegin(YYINITIAL); return CairoTokens.CLOSE_SQUARE_BRACKET;
            }
          // fall through
          case 205: break;
          case 27:
            { yybegin(YYINITIAL); return CairoTokens.BITWISE_XOR;
            }
          // fall through
          case 206: break;
          case 28:
            { yybegin(YYINITIAL); return CairoTokens.OPEN_BRACE;
            }
          // fall through
          case 207: break;
          case 29:
            { yybegin(YYINITIAL); return CairoTokens.BITWISE_OR;
            }
          // fall through
          case 208: break;
          case 30:
            { yybegin(YYINITIAL); return CairoTokens.CLOSE_BRACE;
            }
          // fall through
          case 209: break;
          case 31:
            { yybegin(YYINITIAL); return CairoTokens.BOX;
            }
          // fall through
          case 210: break;
          case 32:
            { yybegin(IN_BLOCK_COMMENT);
            }
          // fall through
          case 211: break;
          case 33:
            { yybegin(IN_RAW_STRING);
            }
          // fall through
          case 212: break;
          case 34:
            { if (yytext().length() >= raw_string_hashes) {
			// Greedily ate too many #'s ... lets rewind a sec.
			if (yytext().length() > raw_string_hashes) {
				yypushback(yytext().length() - raw_string_hashes);
			}
			yybegin(YYINITIAL);
			zzStartRead = start_raw_string;
			return CairoTokens.RAW_STRING_LIT;
		} else {
			yybegin(IN_RAW_STRING);
		}
            }
          // fall through
          case 213: break;
          case 35:
            { zzMarkedPos = zzMarkedPos - 1; zzStartRead -= 1; yybegin(YYINITIAL);
            }
          // fall through
          case 214: break;
          case 36:
            { yybegin(FN_DECL_START); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 215: break;
          case 37:
            { yybegin(FN_DECL_PARA); return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 216: break;
          case 38:
            { yybegin(GENERIC_PARAM_STATE); call_generic_type = CallGenericType.FN_DECL; generic_para_depth = 0; return CairoTokens.LESS_THAN;
            }
          // fall through
          case 217: break;
          case 39:
            { yybegin(FN_DECL_START); return CairoTokens.FN_DECLARATION;
            }
          // fall through
          case 218: break;
          case 40:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 219: break;
          case 41:
            { yybegin(FN_DECL_PARA); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 220: break;
          case 42:
            { yybegin(FN_DECL_START); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 221: break;
          case 43:
            { item_type_parenthesis_depth = 0;yybegin(ITEM_TYPE);  call_item_type = CallItemType.FN_PARA;return CairoTokens.COLON;
            }
          // fall through
          case 222: break;
          case 44:
            { yybegin(FN_DECL_PARA); return CairoTokens.IDENTIFIER;
            }
          // fall through
          case 223: break;
          case 45:
            { yybegin(FN_RETURN_DECL_TYPE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 224: break;
          case 46:
            { item_type_parenthesis_depth = 0;yybegin(ITEM_TYPE); call_item_type = CallItemType.FN_RETURN;return CairoTokens.COLON;
            }
          // fall through
          case 225: break;
          case 47:
            { yybegin(FN_RETURN_DECL_TYPE); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 226: break;
          case 48:
            { item_type_parenthesis_depth = 0;yybegin(ITEM_TYPE); return CairoTokens.TYPE;
            }
          // fall through
          case 227: break;
          case 49:
            { zzMarkedPos = zzMarkedPos - 1; zzStartRead -= 1; yybegin(FN_DECL_START); return CairoTokens.OPEN_BRACE;
            }
          // fall through
          case 228: break;
          case 50:
            { yybegin(LET_START); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 229: break;
          case 51:
            { yybegin(LET_SINGLE_IDENTIFY); return CairoTokens.IDENTIFIER;
            }
          // fall through
          case 230: break;
          case 52:
            { yybegin(LET_SINGLE_IDENTIFY); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 231: break;
          case 53:
            { item_type_parenthesis_depth = 0;yybegin(ITEM_TYPE); return CairoTokens.COLON;
            }
          // fall through
          case 232: break;
          case 54:
            { yybegin(CONST_START); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 233: break;
          case 55:
            { yybegin(CONST_SINGLE_IDENTIFY); return CairoTokens.IDENTIFIER;
            }
          // fall through
          case 234: break;
          case 56:
            { yybegin(CONST_SINGLE_IDENTIFY); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 235: break;
          case 57:
            { yybegin(HASH_START); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 236: break;
          case 58:
            { yybegin(HASH_START); return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 237: break;
          case 59:
            { yybegin(HASH_START); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 238: break;
          case 60:
            { yybegin(HASH_START); return CairoTokens.COMMA;
            }
          // fall through
          case 239: break;
          case 61:
            { yybegin(HASH_START); return CairoTokens.KW_HASH;
            }
          // fall through
          case 240: break;
          case 62:
            { yybegin(GENERIC_PARAM_STATE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 241: break;
          case 63:
            { yybegin(GENERIC_PARAM_STATE); return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 242: break;
          case 64:
            { yybegin(GENERIC_PARAM_STATE); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 243: break;
          case 65:
            { yybegin(GENERIC_PARAM_STATE); return CairoTokens.COMMA;
            }
          // fall through
          case 244: break;
          case 66:
            { yybegin(GENERIC_PARAM_STATE); return CairoTokens.COLON;
            }
          // fall through
          case 245: break;
          case 67:
            { yybegin(NESTED_GENERIC_PARAM_STATE); generic_para_depth += 1; return CairoTokens.LESS_THAN;
            }
          // fall through
          case 246: break;
          case 68:
            { if (call_generic_type == CallGenericType.FN_DECL) {
                yybegin(FN_DECL_START);
            }
            else if(call_generic_type == CallGenericType.STRUCT_DECL){
                yybegin(STRUCT_DECL_START);
            }
            else if (call_generic_type == CallGenericType.ITEM_TYPE) {
                yybegin(ITEM_TYPE);
            }
            return CairoTokens.GREATER_THAN;
            }
          // fall through
          case 247: break;
          case 69:
            { yybegin(GENERIC_PARAM_STATE); return CairoTokens.TYPE;
            }
          // fall through
          case 248: break;
          case 70:
            { yybegin(NESTED_GENERIC_PARAM_STATE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 249: break;
          case 71:
            { yybegin(NESTED_GENERIC_PARAM_STATE); return CairoTokens.COMMA;
            }
          // fall through
          case 250: break;
          case 72:
            { generic_para_depth -= 1;
          if (generic_para_depth == 0) {
            yybegin(GENERIC_PARAM_STATE);
           } else {
            yybegin(NESTED_GENERIC_PARAM_STATE);
          }
        return CairoTokens.GREATER_THAN;
            }
          // fall through
          case 251: break;
          case 73:
            { yybegin(NESTED_GENERIC_PARAM_STATE); return CairoTokens.TYPE;
            }
          // fall through
          case 252: break;
          case 74:
            { yybegin(STATE_STRUCT_FIELD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 253: break;
          case 75:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 254: break;
          case 76:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 255: break;
          case 77:
            { item_type_parenthesis_depth = 0;call_item_type = CallItemType.STRUCT_FIELD;yybegin(ITEM_TYPE);  return CairoTokens.COLON;
            }
          // fall through
          case 256: break;
          case 78:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.IDENTIFIER;
            }
          // fall through
          case 257: break;
          case 79:
            { yybegin(STRUCT_DECL_START); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 258: break;
          case 80:
            { yybegin(GENERIC_PARAM_STATE); call_generic_type = CallGenericType.STRUCT_DECL; generic_para_depth = 0; return CairoTokens.LESS_THAN;
            }
          // fall through
          case 259: break;
          case 81:
            { yybegin(STRUCT_DECL_START); return CairoTokens.TYPE;
            }
          // fall through
          case 260: break;
          case 82:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.OPEN_BRACE;
            }
          // fall through
          case 261: break;
          case 83:
            { yybegin(ITEM_TYPE); call_item_type = CallItemType.IMPL_FIRST;return TokenType.WHITE_SPACE;
            }
          // fall through
          case 262: break;
          case 84:
            { yybegin(ITEM_TYPE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 263: break;
          case 85:
            { item_type_parenthesis_depth += 1;
        yybegin(ITEM_TYPE);
        return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 264: break;
          case 86:
            { if (item_type_parenthesis_depth > 0) {
            item_type_parenthesis_depth -= 1;
            yybegin(ITEM_TYPE);
          }
          else if (call_item_type == CallItemType.FN_PARA) {
              yybegin(FN_DECL_PARA);
              zzMarkedPos = zzMarkedPos - 1;
              zzStartRead -= 1;
          }
          else if (call_item_type == CallItemType.FN_RETURN) {
              yybegin(FN_RETURN_DECL_TYPE);
              zzMarkedPos = zzMarkedPos - 1;
                zzStartRead -= 1;
          } else {
            yybegin(YYINITIAL);
            zzMarkedPos = zzMarkedPos - 1;
            zzStartRead -= 1;
          }

          return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 265: break;
          case 87:
            { if (item_type_parenthesis_depth > 0) {
              yybegin(ITEM_TYPE);
          }
          else if (call_item_type == CallItemType.FN_PARA) {
            yybegin(FN_DECL_PARA);
        }
        else if (call_item_type == CallItemType.FN_RETURN) {
            yybegin(FN_RETURN_DECL_TYPE);
        }
        else if (call_item_type == CallItemType.STRUCT_FIELD) {
            yybegin(STATE_STRUCT_FIELD);
        }
        else if (call_item_type == CallItemType.IMPL_FIRST) {
            yybegin(IMPL_DECL);
        } else {
            yybegin(YYINITIAL);
        }

          return CairoTokens.COMMA;
            }
          // fall through
          case 266: break;
          case 88:
            { yybegin(GENERIC_PARAM_STATE); call_generic_type = CallGenericType.ITEM_TYPE;generic_para_depth = 0; return CairoTokens.LESS_THAN;
            }
          // fall through
          case 267: break;
          case 89:
            { yybegin(ITEM_TYPE); return CairoTokens.AT;
            }
          // fall through
          case 268: break;
          case 90:
            { yybegin(ITEM_TYPE); return CairoTokens.TYPE;
            }
          // fall through
          case 269: break;
          case 91:
            { zzMarkedPos = zzMarkedPos - 1;
          zzStartRead -= 1;
          if (call_item_type == CallItemType.FN_PARA) {
              yybegin(FN_DECL_PARA);
          }
          else if (call_item_type == CallItemType.FN_RETURN) {
              yybegin(FN_RETURN_DECL_TYPE);
          }
          else if (call_item_type == CallItemType.STRUCT_FIELD) {
              yybegin(STATE_STRUCT_FIELD);
          }
          else if (call_item_type == CallItemType.IMPL_FIRST) {
                  yybegin(IMPL_DECL);
          } else {
                yybegin(YYINITIAL);
            }
          return CairoTokens.OPEN_BRACE;
            }
          // fall through
          case 270: break;
          case 92:
            { yybegin(YYINITIAL); return CairoTokens.NOT_EQUAL;
            }
          // fall through
          case 271: break;
          case 93:
            { yybegin(YYINITIAL); return CairoTokens.STRING_LIT;
            }
          // fall through
          case 272: break;
          case 94:
            { yybegin(HASH_START); return CairoTokens.HASH;
            }
          // fall through
          case 273: break;
          case 95:
            { yybegin(FN_RETURN_DECL_TYPE); return CairoTokens.THIN_ARROW;
            }
          // fall through
          case 274: break;
          case 96:
            { yybegin(YYINITIAL); return CairoTokens.DOUBLE_DOT;
            }
          // fall through
          case 275: break;
          case 97:
            { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead; doc_comment = false; comment_depth = 1;
            }
          // fall through
          case 276: break;
          case 98:
            { yybegin(YYINITIAL); return CairoTokens.LINE_COMMENT;
            }
          // fall through
          case 277: break;
          case 99:
            { yybegin(YYINITIAL); return CairoTokens.DOUBLE_COLON;
            }
          // fall through
          case 278: break;
          case 100:
            { yybegin(YYINITIAL); return CairoTokens.LESS_THAN_OR_EQUAL;
            }
          // fall through
          case 279: break;
          case 101:
            { yybegin(YYINITIAL); return CairoTokens.EQUAL;
            }
          // fall through
          case 280: break;
          case 102:
            { yybegin(YYINITIAL); return CairoTokens.FAT_ARROW;
            }
          // fall through
          case 281: break;
          case 103:
            { yybegin(YYINITIAL); return CairoTokens.GREATER_THAN_OR_EQUAL;
            }
          // fall through
          case 282: break;
          case 104:
            { yybegin(YYINITIAL); zzMarkedPos = zzMarkedPos - 1; return CairoTokens.EXPR_CALL;
            }
          // fall through
          case 283: break;
          case 105:
            { yybegin(YYINITIAL); return CairoTokens.KW_AS;
            }
          // fall through
          case 284: break;
          case 106:
            { yybegin(FN_DECL_START); return CairoTokens.KW_FN;
            }
          // fall through
          case 285: break;
          case 107:
            { yybegin(YYINITIAL); return CairoTokens.KW_IF;
            }
          // fall through
          case 286: break;
          case 108:
            { yybegin(YYINITIAL); return CairoTokens.KW_IN;
            }
          // fall through
          case 287: break;
          case 109:
            { yybegin(YYINITIAL); return CairoTokens.KW_OF;
            }
          // fall through
          case 288: break;
          case 110:
            { yybegin(IN_RAW_STRING); start_raw_string = zzStartRead; raw_string_hashes = yytext().length() - 1;
            }
          // fall through
          case 289: break;
          case 111:
            { if (--comment_depth == 0) {
			yybegin(YYINITIAL);
            if (call_comment_type == CallCommentType.STRUCT_FIELD) {
                yybegin(STATE_STRUCT_FIELD);
            }
			zzStartRead = start_comment;
			return doc_comment ? CairoTokens.BLOCK_DOC_COMMENT : CairoTokens.BLOCK_COMMENT;
		} else {
			yybegin(IN_BLOCK_COMMENT);
		}
            }
          // fall through
          case 290: break;
          case 112:
            { yybegin(IN_BLOCK_COMMENT); ++comment_depth;
            }
          // fall through
          case 291: break;
          case 113:
            { yybegin(IN_BLOCK_COMMENT); call_comment_type = CallCommentType.STRUCT_FIELD;start_comment = zzStartRead; doc_comment = false; comment_depth = 1;
            }
          // fall through
          case 292: break;
          case 114:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.LINE_COMMENT;
            }
          // fall through
          case 293: break;
          case 115:
            { yybegin(ITEM_TYPE); return CairoTokens.DOUBLE_COLON;
            }
          // fall through
          case 294: break;
          case 116:
            { yybegin(ITEM_TYPE); return CairoTokens.KW_OF;
            }
          // fall through
          case 295: break;
          case 117:
            { yybegin(YYINITIAL); return CairoTokens.CHAR_LIT;
            }
          // fall through
          case 296: break;
          case 118:
            { yybegin(YYINITIAL); return CairoTokens.TRIPLE_DOT;
            }
          // fall through
          case 297: break;
          case 119:
            { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead; doc_comment = true; comment_depth = 1;
            }
          // fall through
          case 298: break;
          case 120:
            { yybegin(YYINITIAL); return CairoTokens.LINE_DOC_COMMENT;
            }
          // fall through
          case 299: break;
          case 121:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return CairoTokens.DEC_LIT;
            }
          // fall through
          case 300: break;
          case 122:
            { yybegin(YYINITIAL); return CairoTokens.BIN_LIT;
            }
          // fall through
          case 301: break;
          case 123:
            { yybegin(YYINITIAL); return CairoTokens.OCT_LIT;
            }
          // fall through
          case 302: break;
          case 124:
            { yybegin(YYINITIAL); return CairoTokens.HEX_LIT;
            }
          // fall through
          case 303: break;
          case 125:
            { yybegin(YYINITIAL); return CairoTokens.ASSIGN_LEFT_SHIFT;
            }
          // fall through
          case 304: break;
          case 126:
            { yybegin(YYINITIAL); return CairoTokens.ASSIGN_RIGHT_SHIFT;
            }
          // fall through
          case 305: break;
          case 127:
            { yybegin(YYINITIAL); zzMarkedPos = zzMarkedPos - 1; return CairoTokens.MACRO_EXPR_CALL;
            }
          // fall through
          case 306: break;
          case 128:
            { yybegin(YYINITIAL); return CairoTokens.KW_FOR;
            }
          // fall through
          case 307: break;
          case 129:
            { yybegin(LET_START); return CairoTokens.KW_LET;
            }
          // fall through
          case 308: break;
          case 130:
            { yybegin(YYINITIAL); return CairoTokens.KW_MOD;
            }
          // fall through
          case 309: break;
          case 131:
            { yybegin(YYINITIAL); return CairoTokens.KW_MUT;
            }
          // fall through
          case 310: break;
          case 132:
            { yybegin(YYINITIAL); return CairoTokens.KW_PUB;
            }
          // fall through
          case 311: break;
          case 133:
            { yybegin(YYINITIAL); return CairoTokens.KW_REF;
            }
          // fall through
          case 312: break;
          case 134:
            { yybegin(YYINITIAL); return CairoTokens.KW_USE;
            }
          // fall through
          case 313: break;
          case 135:
            { yybegin(FN_DECL_PARA); return CairoTokens.KW_MUT;
            }
          // fall through
          case 314: break;
          case 136:
            { yybegin(FN_DECL_PARA); return CairoTokens.KW_REF;
            }
          // fall through
          case 315: break;
          case 137:
            { yybegin(FN_RETURN_DECL_TYPE); return CairoTokens.KW_MUT;
            }
          // fall through
          case 316: break;
          case 138:
            { yybegin(FN_RETURN_DECL_TYPE); return CairoTokens.KW_REF;
            }
          // fall through
          case 317: break;
          case 139:
            { yybegin(LET_START); return CairoTokens.KW_MUT;
            }
          // fall through
          case 318: break;
          case 140:
            { yybegin(STATE_STRUCT_FIELD);
            }
          // fall through
          case 319: break;
          case 141:
            { yybegin(IN_BLOCK_COMMENT); call_comment_type = CallCommentType.STRUCT_FIELD;start_comment = zzStartRead; doc_comment = true; comment_depth = 1;
            }
          // fall through
          case 320: break;
          case 142:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.LINE_DOC_COMMENT;
            }
          // fall through
          case 321: break;
          case 143:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.KW_PUB;
            }
          // fall through
          case 322: break;
          case 144:
            { yybegin(ITEM_TYPE);
            }
          // fall through
          case 323: break;
          case 145:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead; doc_comment = true; comment_depth = 1;
            }
          // fall through
          case 324: break;
          case 146:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(YYINITIAL); return CairoTokens.LINE_DOC_COMMENT;
            }
          // fall through
          case 325: break;
          case 147:
            { yybegin(YYINITIAL); return CairoTokens.KW_ELSE;
            }
          // fall through
          case 326: break;
          case 148:
            { yybegin(YYINITIAL); return CairoTokens.KW_ENUM;
            }
          // fall through
          case 327: break;
          case 149:
            { yybegin(IMPL_DECL); return CairoTokens.KW_IMPL;
            }
          // fall through
          case 328: break;
          case 150:
            { yybegin(YYINITIAL); return CairoTokens.KW_LOOP;
            }
          // fall through
          case 329: break;
          case 151:
            { yybegin(YYINITIAL); return CairoTokens.KW_MOVE;
            }
          // fall through
          case 330: break;
          case 152:
            { yybegin(YYINITIAL); return CairoTokens.KW_PRIV;
            }
          // fall through
          case 331: break;
          case 153:
            { yybegin(YYINITIAL); return CairoTokens.KW_PROC;
            }
          // fall through
          case 332: break;
          case 154:
            { yybegin(YYINITIAL); zzMarkedPos = zzMarkedPos - 1; return CairoTokens.KW_PUB;
            }
          // fall through
          case 333: break;
          case 155:
            { yybegin(YYINITIAL); return CairoTokens.KW_SELF;
            }
          // fall through
          case 334: break;
          case 156:
            { yybegin(YYINITIAL); return CairoTokens.KW_TRUE;
            }
          // fall through
          case 335: break;
          case 157:
            { yybegin(YYINITIAL); return CairoTokens.KW_TYPE;
            }
          // fall through
          case 336: break;
          case 158:
            { yybegin(GENERIC_PARAM_STATE); return CairoTokens.KW_IMPL;
            }
          // fall through
          case 337: break;
          case 159:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(IN_BLOCK_COMMENT); call_comment_type = CallCommentType.STRUCT_FIELD;start_comment = zzStartRead; doc_comment = true; comment_depth = 1;
            }
          // fall through
          case 338: break;
          case 160:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.LINE_DOC_COMMENT;
            }
          // fall through
          case 339: break;
          case 161:
            { yybegin(YYINITIAL); return CairoTokens.KW_BREAK;
            }
          // fall through
          case 340: break;
          case 162:
            { yybegin(CONST_START); return CairoTokens.KW_CONST;
            }
          // fall through
          case 341: break;
          case 163:
            { yybegin(YYINITIAL); return CairoTokens.KW_CRATE;
            }
          // fall through
          case 342: break;
          case 164:
            { yybegin(YYINITIAL); return CairoTokens.KW_FALSE;
            }
          // fall through
          case 343: break;
          case 165:
            { yybegin(YYINITIAL); return CairoTokens.KW_MATCH;
            }
          // fall through
          case 344: break;
          case 166:
            { yybegin(YYINITIAL); return CairoTokens.KW_SUPER;
            }
          // fall through
          case 345: break;
          case 167:
            { yybegin(YYINITIAL); return CairoTokens.KW_TRAIT;
            }
          // fall through
          case 346: break;
          case 168:
            { yybegin(YYINITIAL); return CairoTokens.KW_WHERE;
            }
          // fall through
          case 347: break;
          case 169:
            { yybegin(YYINITIAL); return CairoTokens.KW_WHILE;
            }
          // fall through
          case 348: break;
          case 170:
            { yybegin(STATE_STRUCT_FIELD); return CairoTokens.KW_CRATE;
            }
          // fall through
          case 349: break;
          case 171:
            { yybegin(YYINITIAL); return CairoTokens.KW_EXTERN;
            }
          // fall through
          case 350: break;
          case 172:
            { yybegin(YYINITIAL); return CairoTokens.KW_RETURN;
            }
          // fall through
          case 351: break;
          case 173:
            { yybegin(YYINITIAL); return CairoTokens.KW_STATIC;
            }
          // fall through
          case 352: break;
          case 174:
            { yybegin(STRUCT_DECL_START); return CairoTokens.KW_STRUCT;
            }
          // fall through
          case 353: break;
          case 175:
            { yybegin(YYINITIAL); return CairoTokens.KW_UNSAFE;
            }
          // fall through
          case 354: break;
          case 176:
            { yybegin(YYINITIAL); return CairoTokens.KW_NOPANIC;
            }
          // fall through
          case 355: break;
          case 177:
            { yybegin(FN_RETURN_DECL_TYPE); return CairoTokens.KW_NOPANIC;
            }
          // fall through
          case 356: break;
          case 178:
            { yybegin(YYINITIAL); return CairoTokens.KW_CONTINUE;
            }
          // fall through
          case 357: break;
          case 179:
            { yybegin(YYINITIAL); return CairoTokens.KW_MACRO_RULES;
            }
          // fall through
          case 358: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
